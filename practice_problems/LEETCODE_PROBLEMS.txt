--------------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/merge-k-sorted-lists/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {

        ArrayList<Integer> a = new ArrayList<>();

        for(int i=0;i<lists.length;i++){
            ListNode head = lists[i];
            ListNode temp = head;
            while(temp!=null){
               a.add(temp.val);
               temp=temp.next;
            }
        }
         Collections.sort(a);
         
         ListNode head = null;
         ListNode temp = null;
         for(int i=0;i<a.size();i++){

            ListNode newnode = new ListNode();
            newnode.val = a.get(i);
            newnode.next=null;
            if(head == null){
                 head = newnode;
                 temp=newnode;
            }else{
                temp.next=newnode;
                temp=temp.next;
            }
         }
        return head;
    }
}
---------------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/validate-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> a = new ArrayList<>();

    public boolean isValidBST(TreeNode root) {
         
         if(root != null){
         isValidBST(root.left);
         a.add(root.val);
         isValidBST(root.right);
         }
         int f=0;
         for(int i=0;i<a.size()-1;i++){
             if(a.get(i) >= a.get(i+1)){
                   f=1;
             }
             if(f==1){
                 break;
             }
         }
         if(f==1){
             return false;
         }
         return true;
    }
}
------------------------------------------------------------------------------------------------------------

https://leetcode.com/problems/longest-repeating-character-replacement/

class Solution {
    public int characterReplacement(String s, int k) {
     int left=0;
       int right=0;
       int max=0;
       int max_repeat=0;
       int window=0;
       HashMap<Character,Integer> h =  new HashMap<>();

       while(left<s.length() && right<s.length()){
           if(h.containsKey(s.charAt(right))){
               h.put(s.charAt(right),h.get(s.charAt(right))+1);
           }else{
               h.put(s.charAt(right),1);
           }
           window=right-left+1;

               max_repeat = Collections.max(h.values());

           if(window-max_repeat <=k){
               if(window>max){
                   max = window;
               }
               right++;
           }else if(window-max_repeat >k){
             h.put(s.charAt(left) , h.get(s.charAt(left))-1);
               left++;
              right++;
           }
       }
       return max;
    }
}
----------------------------------------------------------------------------------------------------------------

https://leetcode.com/problems/reorder-list/

class Solution {
    public void reorderList(ListNode head) {

        ListNode temp=head;
        ListNode prev=null;
        ListNode tail=temp;

     if(head.next != null){
        while(temp!=prev){
            tail=temp;
            while(tail.next !=null){
                prev=tail;
                tail=tail.next;
            }
        if(temp!=prev){

            tail.next=temp.next;
            temp.next=tail;
            prev.next=null;
    
            temp=temp.next;
            temp=temp.next;
            }
        }
      }
    }
}