https://leetcode.com/problems/longest-repeating-character-replacement/

class Solution {
    public int characterReplacement(String s, int k) {
     int left=0;
       int right=0;
       int max=0;
       int max_repeat=0;
       int window=0;
       HashMap<Character,Integer> h =  new HashMap<>();

       while(left<s.length() && right<s.length()){
           if(h.containsKey(s.charAt(right))){
               h.put(s.charAt(right),h.get(s.charAt(right))+1);
           }else{
               h.put(s.charAt(right),1);
           }
           window=right-left+1;

               max_repeat = Collections.max(h.values());

           if(window-max_repeat <=k){
               if(window>max){
                   max = window;
               }
               right++;
           }else if(window-max_repeat >k){
             h.put(s.charAt(left) , h.get(s.charAt(left))-1);
               left++;
              right++;
           }
       }
       return max;
    }
}
----------------------------------------------------------------------------------------------------------------

https://leetcode.com/problems/reorder-list/

class Solution {
    public void reorderList(ListNode head) {

        ListNode temp=head;
        ListNode prev=null;
        ListNode tail=temp;

     if(head.next != null){
        while(temp!=prev){
            tail=temp;
            while(tail.next !=null){
                prev=tail;
                tail=tail.next;
            }
        if(temp!=prev){

            tail.next=temp.next;
            temp.next=tail;
            prev.next=null;
    
            temp=temp.next;
            temp=temp.next;
            }
        }
      }
    }
}